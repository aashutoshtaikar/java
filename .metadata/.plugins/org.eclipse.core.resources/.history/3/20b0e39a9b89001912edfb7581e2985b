Day3
=====

1. Types if relations in java
2. Object class methods
3. Abstract classes and interfaces
4. Dynamic binding concepts
5. Some programs on this

  	Types of Relations in Java:
  	
  	1. Is-A 		>> Generalization ==> Inheritance
  	
  	
  	2. Has-A		>> Aggregation    ==> Composition

  	# Object used in a class scope
  	
  	Class Employee{
  		int empNumber;
  		String empName;
  		
  		String pCityName;
  		String pStateName;
  		String pPinCode;
  		String pHouseNumber;
  		String pStreetName;
  		
  		//no code re usability here
  		String lCityName;
  		String lStateName;
  		String lPinCode;
  		String lHouseNumber;
  		String lStreetName;
  	}
  	
  	//with code re-usability --> aggregation , one-one, one-many, Has-A relationship
  	Class Address{
  		String CityName;
  		String StateName;
  		String PinCode;
  		String HouseNumber;
  		String StreetName;
  	}
  	
  	Class Employee{
  		int empNumber;
  		String empName; // has-A cuz String is a pre-def Class
  		
  		Address pAddress; // has-A
  		Address lAddress;	//has-A , scope is throughout the Class 
  	}
  	
  	3. Uses-A 		>> Association    ==> Comp 
  	
  	# Object used in  the same method scope
  	
  	public void readEmpDetails(){
  		Scanner sc = new Scanner(System.in);
  		int value = sc.nextInt(); // Uses-A , scope is within this method only
  	}
  	
  	================
  	Factory Methods (not Factory design pattern)
  	================
  	1. If you want to create an object without using a new method we can create an object
  	2. By default factory methods are public and static 
  	3. Factory method tries to return an object of the same class which it belongs to 
  	
  	Examples:
  	1. Calendar.getInstance();
  	
  	2. user defined factory method
  		public synchronized static SingletonDemo getInstance() {
		if (mySingleton == null) {
			mySingleton = new SingletonDemo(); // lazy
		}
		return mySingleton;
	}
  	
  	3. DateFormat.getDateInstance(-,-);
  	
  	====================
  	Object class Methods
  	====================
  	java.lang.Object => super class for each class in java
  	Object class methods
  	1. Class getClass();
  	
  	2. int hashCode();
  		
  		HashCode is a unique identification number which is assigned by the JVM 
  		for its internal processing.
  		
  		It is possible to override the HashCode() method for any Object class
  		 
  	3. boolean equals();
  		In object class impl equality wont check based on object class it will compare the reference
  		by default It will not check the content
  		
  		What is the need to override both equals and hashcode method?
  		Is it mandatory to override both methods at once? 
  		
  		Contract between equals and hashCode
  			>>if two objects are equal then both objects hashCode should be same
  			>>However if we dont override both of them there is no difference when working with non collections, 
  				but while working with collections it is mandatory
  		 
  	4. String toString();
  	
  	5. Object Clone() throws CloneNotSupportedException;
  	
  	6. void finalize();
  		To do some cleanup operations
  		
  		# Is it possible to force the garbage collector?
  		>> It is not possible to force the garbage collector, we can just send the request by System.gc()
  		
  		
  	related to threads
  	7. notify();  notifyAll();
  		wait(); wait(-,-); ... 