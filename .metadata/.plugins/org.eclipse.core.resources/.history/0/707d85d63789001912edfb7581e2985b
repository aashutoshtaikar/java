
   # No garbage values in JAVA like c language but default values 
   			  Default value
    		  ======
    int family	 0
    float 		0.0
    char 
    boolean	   false
    String 		null
    Object 		null 
    
    # function syntax in C:
    ======================
 	returnType <<functionName>>(list of args if any){
 		//Local variables
 		//Business logic
 		//return with an expression/value
 	}
 	
 	# Method syntax in java:
 	========================
 	[access modifiers | few keywords] returnType <<functionName>>(list of args if any){
 		
 	} 
 	
 	access modifiers:
 	1. public 
 	2. private
 	3. protected
 	4. default
 	
 	* If no access modifiers specified in java --> default ; in c++ --> private
 	
 	========
 	# Class:
 	========
 	>> user defined datatype
 	>> class is a blue print -> pack member variables and methods in single unit
 	>> class is just a template which doesnt have any physical memory
 	
 	======
 	Object:
 	======
 	1. Instance of a class
 		>> new operator dynamically mallocs the memory at runtime 
 	2. Value form of a class
 	3. Class variable is nothing but object
 	4. Object is a real world entity 
 	5. Grouped entity
 	6. BLue print of a class
 	7. Physical form of a class
 	
  # Different ways to create object:
  ==================================
  1. new operator
  2. clone method
  3. Using De-serialization
  4. Using class.forName("fully qualified name of a class").newInstance()
  5. By using factory methods
  
  # SDLC:
  =======
  1. Requirement Analysiss and Gathering
  2. Design
  		=> UI Design
  		=> Server side
  		=> Database Design
  3. Code
  4. Testing
  5. Integration
  
  For example:
  Employee Management System
  ==========================
  # Naming:
  Nouns 	 - Classes
  				Employee
  				Department
  				Address
  				ProjectDetails
  				
  Adjectives - Data Members(Member variables)
 				Address - cityId, cityName etc
 				
 				 
  Verb 		 - Member methods(Member functions)
  
  
  # Object => State(variables) & Behavior(logic/functions)
 
  # Method overloading:
  =====================
  Type, Number and order of args
  Used in constructor chaining
  
  Constructor:
  ============
  # constr never creates object, it is used to initialize the object
  
  1. Constr name and class name is same
  2. Constr does not return any value
  3. Constr used to init the object properties at the time of creation of object
  4. No need to call, it will be called by JVM (new operator)
  5. Constr is a special method
  	>> Default/no parameter constr 
  	>> parameterized constr
  	>> Object parameterized constr (copy constr)
   
  6. If there is no user defined constr JVM creates a default constr
  
  this keyword:
  =============
  Represents the current instance
  @Variable level
  @constr level //constr chaining
  @method level //
  as a method arg
  as a method return type
  
  
  
  In what scenarios are we using private constructors in real time applications?
  >> Singleton DP //one instance for JVM
  >> 
  
  # Copy constructor: to copy the existing object data for creating a new object  
 
  # JVM architecture
  Byte code -> Class loader subsystem
  
  # Need of static block: 
  static {}
  To enable log 4J function - as static block executes before main method
  Log 4J - open source framework for recording activity of the application
  
  # Instance block : 
  {}
  Executed whenever we create an object
  Executed before constructor call
  
  # Order of execution
  1. Static block
  2. Main(PSVM) - gets invoked whenever we create an object 
  3. Instance block
  4. Constructor
  
  # Singleton Examples:
  search for predef singleton in java
  1. Logger class in Log 4j 
  2. Task Manager instance
  3. JVM instance
  4. In Spring fw - default bean scope is singleton
