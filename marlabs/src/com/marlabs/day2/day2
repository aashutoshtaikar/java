day2:
=====

Topic-1:

>> static VS instance variables
>> static VS instance methods
>> static VS instance blocks

Topic-2:

>>Inheritance
>>super
	@variable level
	@method level
	@constr level

>>final
	@variable level
	@method level
	@constr level
	
>>Singleton design pattern

  #JVM internal memory:
  ====================
  instance variables -> seperate mem locations per object (object level dependency, independent from class dependency)
  static variables -> same mem location allocated as per class (class level dependency, independent from objects dependency)
  
  # JVM architecture
  Byte code(static variables, methods, block) -> Class loader subsystem
  
  # Static VS instance methods:
  ============================
  Static 	-> one time operations(eg. getting a connection from db)
  instance  -> repeated operations(eg. reading data from file)
  
  Static methods 
  -> can access static variables only
  -> to call, no object needed
  
  instance methods 
  -> can access static as well as instance variables
  -> to call, object required 
  
  # Need of a static block: 
  =======================
  #static block:
  static {}
  Executed before main
  executed when we create any first object of the class
  
  # where would we need a static block?
  - statement to be printed before creating any objects of a class
  - to initialize values/objects before the execution of main method
  - to do class level initialization in the beginning
  - for eg. To enable log 4J function - as static block executes before main method
   
  Log 4J:
  =======
  Log 4J - open source framework for recording activity of the application, for debugging and testing when required
  
  # Instance block : 
  {}
  Executed only when we create an object
  Executed before constructor call

    # Order of execution
  1. Static block
  2. Main(PSVM)  
  3. Instance block - executes whenever we create an object
  4. Constructor - gets invoked whenever we create an object
  
    # Singleton Examples:
  google search for predef singleton in java
  1. Logger class in Log 4j 
  2. Task Manager instance
  3. JVM instance
  4. In Spring fw - default bean scope is singleton
  		to make prototype -> scope in xml tag
  5. java.lang.Runtime (Runtime class)
  
  To create singleton class:
  Way1:
  1. static obj of same class
  2. private constructor
  3. static getInstance method to get instance of obj
  
  Way2:
  1. enum
  
  ===========
  Inheritance
  ===========
  
  >> Code re-usability
  DIfferent code re-usability techniques?
  
  	Types of Relations in Java:
  	
  	1. Is-A 		>> Generalization ==> Inheritance
  	2. Has-A		>> Aggregation    ==> Composition
  	3. Uses-A 		>> Association    ==> Comp 
  
  >> Faster developement
  
  Types of inheritances:
  1. Single 
  2. Multi level    (Grandfather -> father -> child)
  3. Multiple 		(may cause diamond problem, not supported with classes in java, interfaces support this tho)
  4. Hierarchical   (one base class -> more than one derived class)
  5. Hybrid			()
  
  Base class/ Parent class/ Super class
  	The class which is giving the properties and methods to be reused
  	
  Derived class/ Child class/ sub class
  	The class which is reusing the properties and methods from base  
  
  Note:
  =====
  	>> suggested to create an object for bottom most derived class
  	>> even tho creating object for bottom most class
  		- 1. memory will be allocated for base variables and methods
  		- 2. memory will be allocated for derived variables and methods
  	>> Application control always lies in derived class
  	
  	>> by using sub class reference
  		 we can access base class methods and variables(properties)
  		 we can access sub class methods and properties
  		 vice versa not possible
  		 
  	>> keywords specifically related to inheritance:
  	
  		1. extends
  		2. super 
  			@variable level
  			@method level
  			@constr level
  		
  		3. final 
  			@variable level
  			@method level
  			@class level
  	
  	Method overriding:
  	==================
  	- Same name and signature, definition may be different
  	
  	
  				
  	